{"version":3,"sources":["app/js/components/helper.js","app/js/components/hotspot.js","app/js/components/panorama.js","app/js/components/tour.js","app/js/initialize.js"],"names":[],"mappingspPA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA","file":".public/js/app.js","sourcesContent":["/* global AFRAME, THREE */\n\nAFRAME.registerComponent('hotspot-helper', {\n  schema: {\n    target: {type: 'selector'},\n    distance: {type: 'number', default: 5},\n    distanceIncrement: {type: 'number', default: 0.25},\n  },\n\n  init: function () {\n    if (!this.data.target) {\n      console.error('Hotspot-helper: You must specify a target element!');\n      return;\n    }\n\n    var self = this;\n\n    this.camera = document.querySelector('[camera]');\n    this.targetRotationOrigin = this.data.target.getAttribute('rotation');\n    this.targetPositionOrigin = this.data.target.getAttribute('position');\n\n    // Helper UI.\n    var uiContainer = this.makeUi();\n    document.body.appendChild(uiContainer);\n\n    // Enabled.\n    this.enabled = uiContainer.querySelector('#hh-enabled');\n    this.enabled.addEventListener('click', function () {\n      uiContainer.dataset.enabled = !!self.enabled.checked;\n    });\n\n    // Set distance.\n    var distanceInput = this.distanceInput = uiContainer.querySelector('#hh-distance');\n    distanceInput.addEventListener('input', function () {\n      self.updateDistance(this.value);\n    });\n    distanceInput.value = this.data.distance;\n\n    // Copy position to clipboard.\n    var copyPosition = uiContainer.querySelector('#hh-copy-position');\n    copyPosition.addEventListener('click', function () {\n      self.copyToClipboard(self.position);\n    });\n\n    // Mouse-wheel distance.\n    window.addEventListener('wheel', this.handleWheel.bind(this));\n\n    // Rotation.\n    this.rotation = uiContainer.querySelector('#hh-rotation');\n\n    // Copy rotation to clipboard.\n    var copyRotation = uiContainer.querySelector('#hh-copy-rotation');\n    copyRotation.addEventListener('click', function () {\n      self.copyToClipboard(self.rotation);\n    });\n\n    // Look at.\n    this.lookToggle = uiContainer.querySelector('#hh-lookat');\n\n    // Position.\n    this.position = uiContainer.querySelector('#hh-position');\n\n    // Empty object3D for position.\n    var targetObject = this.targetObject = new THREE.Object3D();\n    this.dolly = new THREE.Object3D();\n    this.dolly.add(targetObject);\n    this.el.object3D.add(this.dolly);\n    this.updateDistance(this.data.distance);\n\n    // Set positioning on target so that clicks are not triggered when placing hotspot.\n    this.data.target.setAttribute('hotspot', {positioning: true});\n  },\n\n  makeUi: function () {\n    var uiContainer = document.createElement('div');\n    uiContainer.id = 'hh';\n    var markup = `\n    <style>\n      #hh-heading {\n        font-family: Consolas, Andale Mono, monospace;\n      }\n\n      #hh {\n        background: #333;\n        color: #fff;\n        font-family: Helvetica, Arial, sans-serif;\n        left: 0;\n        margin: 10px;\n        padding: 10px;\n        position: absolute;\n        top: 0;\n      }\n\n      #hh h1 {\n        margin: 0;\n      }\n\n      #hh h2 {\n        font-weight: 200;\n        margin: 10px 0;\n      }\n\n      #hh[data-enabled=\"false\"] section {\n        display: none;\n      }\n\n      #hh section {\n        margin: 20px 0;\n      }\n\n      #hh .hh-check,\n      #hh .hh-tip {\n        display: block;\n        font-size: .75rem;\n        margin: 8px 0;\n      }\n\n      #hh .hh-tip {\n        color: rgb(148,148,148);\n      }\n\n      #hh input[type=\"text\"] {\n        border: none;\n        background: rgb(108,108,108);\n        color: #fff;\n        padding: 5px;\n      }\n\n      #hh input[type=\"button\"] {\n        background: #fff;\n        border: none;\n        padding: 5px;\n      }\n\n      #hh input[type=\"button\"]:active {\n        background: rgb(47,77,135);\n        color: #fff;\n      }\n    </style>\n\n    <h1 id=\"hh-heading\" class=\"hh-heading\">hotspot-helper</h1>\n\n    <span class=\"hh-check\">\n      <label>\n        <input id=\"hh-enabled\" type=\"checkbox\" checked> Enabled\n      </label>\n    </span>\n\n    <section>\n      <label>\n        <input id=\"hh-distance\" size=\"5\" type=\"text\"> Hotspot distance\n        <span class=\"hh-tip\">Use mouse scroll to adjust distance</span>\n      </label>\n    </section>\n\n    <section>\n      <label>\n        <h2>Position</h2>\n        <input id=\"hh-position\" size=\"20\" type=\"text\" value=\"1.000 1.000 1.000\">\n        <input id=\"hh-copy-position\" type=\"button\" value=\"Copy to Position\">\n      </label>\n    </section>\n\n    <section>\n      <h2><label for=\"hh-rotation\">Rotation</label></h2>\n      <input id=\"hh-rotation\" size=\"20\" type=\"text\" value=\"1.000 1.000 1.000\">\n      <input id=\"hh-copy-rotation\" type=\"button\" value=\"Copy to Rotation\">\n      <label>\n        <span class=\"hh-check\">\n          <input id=\"hh-lookat\" type=\"checkbox\"> Look at origin\n        </span>\n      </label>\n    </section>\n    `;\n    uiContainer.innerHTML = markup;\n    return uiContainer;\n  },\n\n  updateDistance: function (distance) {\n    this.targetObject.position.z = -distance;\n  },\n\n  copyToClipboard: function (input) {\n    input.select();\n    document.execCommand('copy');\n    if (window.getSelection) {\n      window.getSelection().removeAllRanges();\n    }\n  },\n\n  handleWheel: function (e) {\n    var input = this.distanceInput;\n    var data = this.data;\n    var increment = e.deltaY < 0 ? data.distanceIncrement : -data.distanceIncrement;\n    var value = parseFloat(input.value) + increment;\n    if (value < 0) {\n      value = 0;\n    }\n    input.value = value;\n    this.updateDistance(value);\n  },\n\n  updateRotation: function () {\n    var target = this.data.target;\n    if (this.lookToggle.checked) {\n      if (!target.hasAttribute('look-at')) {\n        target.setAttribute('look-at', '[camera]');\n      }\n      var worldRotation = this.data.target.object3D.getWorldRotation();\n      this.rotation.value = this.toDeg(worldRotation.x).toFixed(2) + ' ' + this.toDeg(worldRotation.y).toFixed(2) + ' ' + this.toDeg(worldRotation.z).toFixed(2);\n    } else {\n      if (target.hasAttribute('look-at')) {\n        target.removeAttribute('look-at');\n      }\n      this.rotation.value = `${this.targetRotationOrigin.x} ${this.targetRotationOrigin.y} ${this.targetRotationOrigin.z}`;\n      target.setAttribute('rotation', this.targetRotationOrigin);\n    }\n  },\n\n  toDeg: function (rad) {\n    return rad * 180 / Math.PI;\n  },\n\n  tick: function () {\n    var target = this.data.target;\n    if (!target) return;\n    if (this.enabled.checked) {\n      var rotation = this.camera.object3D.getWorldRotation();\n      this.dolly.rotation.copy(rotation);\n      var position = this.targetObject.getWorldPosition();\n      var cords = position.x.toFixed(2) + ' ' + position.y.toFixed(2) + ' ' + position.z.toFixed(2);\n      target.setAttribute('position', {\n        x: position.x,\n        y: position.y,\n        z: position.z\n      });\n      this.position.value = cords;\n      this.updateRotation();\n    } else {\n      target.setAttribute('position', this.targetPositionOrigin);\n      target.setAttribute('rotation', this.targetRotationOrigin);\n    }\n  }\n});\n","AFRAME.registerPrimitive('a-hotspot', {\n  defaultComponents: {\n    hotspot: {}\n  },\n  mappings: {\n    for: 'hotspot.for',\n    to: 'hotspot.to'\n  }\n});\n\nAFRAME.registerComponent('hotspot', {\n  schema: {\n    for: { type: 'string' },\n    to: { type: 'string' },\n    positioning: { type: 'boolean', default: false }\n  },\n\n  init: function () {\n    this.tour = document.querySelector('a-tour');\n    this.el.addEventListener('click', this.handleClick.bind(this));\n  },\n\n  handleClick: function () {\n    if (this.data.positioning) return;\n    var tour = this.tour.components['tour'];\n\n    tour.loadSceneId(this.data.to);\n  }\n});","AFRAME.registerPrimitive('a-panorama', {\n  defaultComponents: {\n    panorama: {}\n  }\n});\n\nAFRAME.registerComponent('panorama', {\n  schema: {\n    rotation: { type: 'vec3' },\n    src: { type: 'string' }\n  }\n});","AFRAME.registerPrimitive('a-tour', {\n  defaultComponents: {\n    tour: {}\n  }\n});\n\nAFRAME.registerComponent('tour', {\n  init: function () {\n    this.sky = document.createElement('a-sky');\n    this.el.appendChild(this.sky);\n    var images = Array.prototype.slice.call(this.el.querySelectorAll('a-panorama'));\n    if (images.length === 0) {\n      console.error('You need to specify at least 1 image!');\n      return;\n    }\n    var start = images[0];\n    this.loadSceneId(start.getAttribute('id'));\n  },\n\n  loadSceneId: function(id) {\n    this.loadImage(this.el.querySelector('a-panorama#' + id));\n    this.setHotspots(id);\n  },\n\n  loadImage: function (image) {\n    var sky = this.sky;\n    sky.setAttribute('src', image.getAttribute('src'));\n    var camera = this.el.sceneEl.camera.el;\n    camera.setAttribute('rotation', image.getAttribute('rotation'));\n  },\n\n  setHotspots: function(id) {\n    var hotspots = Array.prototype.slice.call(this.el.querySelectorAll('a-hotspot'));\n    hotspots.forEach(function (spot) {\n      var visible = spot.getAttribute('for') == id ? true : false;\n      spot.setAttribute('visible', visible);\n    })\n  }\n});\n","require('aframe-look-at-component');\n// require('platform');\n// require('aframe-always-fullscreen-component');\nrequire('./components/tour');\nrequire('./components/panorama');\nrequire('./components/hotspot');\nrequire('./components/helper');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('Initialized app');\n});\n"]}